!!!
html(lang="en")
  head
    meta(charset="uft-8")
    meta(name="description", content="D3 introduction")
    meta(name="author", content="Francesco Occhipinti")
    meta(name="apple-mobile-web-app-capable", content="yes")
    meta(name="apple-mobile-web-app-status-bar-style", content="black-translucent")
    meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")

    link(rel="stylesheet", href="css/reveal.min.css")
    link(rel="stylesheet", href="css/theme/night.css", id="theme")

    // For syntax highlighting
    link(rel="stylesheet", href="lib/css/zenburn.css")

    style.
      .white h2, .white h3, .white p {
        color: white;
        text-shadow: 0px 0px 30px rgba(0, 0, 0, 1);
      }

    // If the query includes 'print-pdf', use the PDF print sheet
    script.
      document.write( '<link rel="stylesheet" href="css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );

    //- <!--[if lt IE 9]>
    //- <script src="lib/js/html5shiv.js"></script>
    //- <![endif]-->

    title
      About test driven development

  body
    div(class="reveal")
      div(class="slides")

        section

          section

            h1 Test driven development

        section

          section

            h3 why tests?

          section

            p.
            
              normal tests, written after the development, have mainly one
              purpose

            h3.fragment regression

            img.fragment(src="devolution.png")

            p.fragment.

              regression tests relief you code by a task: to be similar to
              itself

            p.fragment.

              thus, they enable the code to evolve, without too many worries

          section

            p but tests are terribly boring

            p.fragment
            
              |the typical test is just "
              i stating the obvious
              |"

            p.fragment and you will never find the time for them

            i.fragment increase the test coverage? 
            i.fragment get more people to do that manually

          section

            p i hate boring things

            p.fragment and we where quite stressed, in the frontend

            p.fragment.

              but from May to now, i was able to keep developing and at the
              same time writing ~200 test specifications
            
            p.fragment and they really helped me

            p.fragment how to do that?

        section

          section

            h2 the principle

            p.fragment everything is based on an extremely simple principle

          section

            h1.fragment test
            h1.fragment before

          section

            ul

              li write the tests
              li.fragment.
              
                test the tests: run the tests, they should fail and fail in the
                right way

              li.fragment develop
              li.fragment test
              li.fragment develop
              li.fragment test
              li.fragment develop
              li.fragment test...

            p.fragment your tests will tell you when you're done
            p.fragment in a very zen way, your end will meet your principle :D
            img(src="yinyang.gif").fragment

          section

            p.

              also several test / dev cycles could happen, just keep in mind to
              revert the traditional order

          section

            p.

              every discovered bug, should be handled as a new feature

            p.fragment

              p bug -> fix -- no
              p bug -> test -> fix -- yes

            p.fragment.
            
              that's the only way to slowly eliminate regression problems

        section
            
          section
            
            h2 the wider impact

          section

            p as we said, the principle is simple:

            h5.fragment tests before

            p.fragment so, the first thing we get, are tests

          section

            p.

              "what do i want"? first of all

            ul.fragment
              li towards declarative
              li towards literate

            br
            br

            pre(style="font-size:23px").fragment.
            
              describe('my component', function() {
                it('goes to detail after click on the item', function() {
                  spyOn(history.newPage);
                  this.component.select('$item').eq(0).click();
                  expect(history.newPage)
                    .toHaveBeenCalledWith({
                      page: 'detail',
                      item: 3243
                    });
                });
              });

            p.fragment.
            
              this is the only way i know in order to think outside-in, from
              the very beginning

          section

            p.
            
              this process can lead you to always better interfaces, or not

            p.fragment.

              (that means, to better testing logic instead)

            br
            br
            br

            pre(style="font-size:24px").

             expect(node.visible).toBe(true);

             expect(node).toBeVisible();

          section

            p final consideration, for those with an analytical mind

            p.fragment it's not bullet-proof

            img.fragment(src="spider.jpg")

          section

            img(src="bug.jpg")

            p.fragment but it helps, a lot

        section
            
          section
            
            h2 tips from experience

          section

            p for the lazy:

            p.fragment expect('')

            p.fragment let the tests write themselves

            p.fragment advantage? regression

          section

            h3 grow in details when you need them

            pre(style="font-size:24px").

              it('shows the correct value', function() {
                var $value = this.component.select('$value');
                expect(raw in this.component.data).toBe(true);
                expect(this.component.lastTemplateInput.raw)
                  .toBe(0.3476);
                expect(this.component.format(0.3476))
                  .toBe('34.76%');
                expect(this.component.lastTemplateInput.formatted)
                  .toBe('34.76%');
                expect($value.length).toBe(1);
                expect($value.text()).toBe('34.67%');
              });

            p.fragment.
            
              yes, tests are supposed to grow, while code is supposed to shrink

            p.fragment at some extent

          section(data-background="doublefire.jpg", data-background-size="cover")
            
            h3 cross fire

            p.fragment

              p tackle the same problem
              
              p from different angles

          section

            h4 infrastructural reforms

            img(src="infrastructure.jpg")

            p.fragment

              |from my experience, in order to switch from a normal trial and
              |error process to a test driven one, an 
              b initial development effort 
              |is needed.

            br

            p.fragment

              |this effort is usually 
              b quite small 
              |, requiring one or two days.
              |still you may feel quite unconfortable with your initial testing
              |tools. convenience will come with time

        section

          section

            h2 questions?

            p.fragment.
            
              if you don't have questions, why aren't you yet developing with
              test driven?

    script(src="lib/js/head.min.js")
    script(src="js/reveal.min.js")
    script.
      // Full list of configuration options available here:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
        controls: true,
        progress: true,
        history: true,
        center: true,
        theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
        transition: Reveal.getQueryHash().transition || 'linear', // default/cube/page/concave/zoom/linear/fade/none
        transitionSpeed: 'slow',
        // Optional libraries used to extend on reveal.js
        dependencies: [
          { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
          { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
          { src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
          { src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
          // { src: 'plugin/search/search.js', async: true, condition: function() { return !!document.body.classList; } }
          // { src: 'plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList; } }
        ]
      });

